<?php

namespace Tests\Browser;

use Tests\DuskTestCase;
use Laravel\Dusk\Browser;
use App\Helpers\NumberHelper;

class WithdrawPlayerTest extends DuskTestCase
{
    private $home_page = '/backoffice-tombola/public/en/home_page';
    private $backoffice_username = "";
    private $backoffice_password = "";
    private $test_url_page1 = "/transfer-credit/withdraw-list";
    private $test_url_withdraw_to_player = "/transfer-credit/cashier-player-withdraw/user_id/";
    private $test_url_player_withdraw_completed = "/transfer-credit/cashier-player-withdraw-completed/user_id/";
    private $test_amount = 5.00;
    private $old_player_amount = 0;
    private $new_player_amount = 0;


    public function setUp()
    {
        $this->backoffice_username = getenv("ADMINISTRATOR_OPERATER_BACKOFFICE_USERNAME");
        $this->backoffice_password = getenv("ADMINISTRATOR_OPERATER_BACKOFFICE_PASSWORD");
        $this->home_page = getenv('TEST_HOME_PAGE_URL_FOR_BROWSER_TESTING');
        $this->test_url_withdraw_to_player = $this->test_url_withdraw_to_player . getenv('ADMINISTRATOR_OPERATER_CHILD_PLAYER_ID');
        $this->test_url_player_withdraw_completed = $this->test_url_player_withdraw_completed . getenv('ADMINISTRATOR_OPERATER_CHILD_PLAYER_ID');
        return parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @throws \Throwable
     */
    public function testLoginBackoffice()
    {
        $username = $this->backoffice_username;
        $password = $this->backoffice_password;

        $this->browse(function (Browser $browser) use($username, $password){
            $browser->visit('')
                ->type('username', $username)
                ->type('password', $password)
                ->press('login')
                ->assertPathIs($this->home_page)
                ->assertSee('Home');
            $browser->click("#toggleSideBar");
        });
    }

    /**
     * @throws \Throwable
     */
    public function testVisitWithdrawListPage()
    {
        $this->browse(function (Browser $browser) {
            $browser->visit($this->test_url_page1)
                ->assertPathIs(getenv('TEST_APPLICATION_NAME') . $this->test_url_page1)
                ->assertSee('Deposit')
            ;
        });
    }

    /**
     * @throws \Throwable
     */
    public function testGoToWithdrawOnPlayerPage()
    {
        $this->browse(function (Browser $browser) {
            $browser->visit($this->test_url_withdraw_to_player)
                ->assertPathIs(getenv('TEST_APPLICATION_NAME') . $this->test_url_withdraw_to_player)
                ->assertSee('Credit Amount')
            ;
            $this->old_player_amount = NumberHelper::convert_double($browser->inputValue('PLAYER_CREDIT_STATUS'));
            $this->new_player_amount = $this->old_player_amount - $this->test_amount;

            $browser
                ->type('CREDIT_AMOUNT', $this->test_amount)
                ->press('SUBMIT')
                ->assertPathIs(getenv('TEST_APPLICATION_NAME') . $this->test_url_player_withdraw_completed)
                ->assertSee("Success!")
                ->assertSee('Transaction Successfully Completed')
                ;

            $new_player_amount_in_form = NumberHelper::convert_double($browser->inputValue('PLAYER_CREDIT_STATUS'));
            $this->assertEquals($this->new_player_amount, $new_player_amount_in_form);

            $browser
                ->press('SUBMIT')
                ->assertPathIs(getenv('TEST_APPLICATION_NAME') . $this->test_url_page1)
            ;

        });
    }

    /**
     * @throws \Throwable
     */
    public function testLogoutBackoffice()
    {
        $this->browse(function (Browser $browser) {
            //$browser->pause(1000);
            $browser->clickLink("Logout")
            ;
        });
    }
}
